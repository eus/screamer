Assignment 6: Bringing the ToDo List Application Online --------------------------------------------------------   In this week's assignment, you will go online with your 'Android ToDo List Application' implemented during the last assignment. You will implement a server backend that is capable of storing the 'ToDo Items' of several instances of your application online. Therefore, you will need to develop a protocol that allows the server to identify and synchronize data with the respective user's application. Once again, you will then test the system locally in the emulator provided by the Android SDK.

1) Extend the 'Android ToDo List Application' such that each user can be uniquely identified by the server backend, i.e., during a connection handshake the application should to be able to provide an unambiguous user ID to the server (more details are given below). Furthermore, add a revision number to each 'ToDo Item' and ensure that to each 'ToDo Item' an internal item ID is assigned that is locally unique, i.e. the application and server should be able to determine whether an item already exists or not.
NOTE: A user might have several Android device. One can still dream, right!?

2) The server backend has be able to store the 'ToDo Items' of up to 10 different users each identified by their user ID. The fields maintained per 'ToDo Item' should be the same as the ones maintained by the 'ToDo List Application'. Regarding item synchronization conflicts, the server only needs to ensure the integrity of the received items from the client (see below) as the revisions are maintained at the server.
NOTE: Your client application should not rely on the server being implemented in Java, i.e. do NOT use Java-specific RPCs. Thus, you can re-use most parts of the screamer server implemented during the first assignments. 

3) Develop a protocol implementation for the client and the server application that allows them to synchronize their data with each other. The protocol should consist of 4 phases:
a) Handshake: The Android application identifies itself towards the server by providing its unique user ID. The server acknowledges the new connection, unless the user is unknown so far AND the maximum number of maintained users is already reached. The handshake requires no authentication.
b) Server->client sync: The client request the transmission of all 'ToDo Items' stored on the server. When receiving the 'ToDo Items' in response, the client first checks the item ID of each 'ToDo Item'. If the item is not locally available yet, it stores it as a new item. Otherwise, it compares the revision of the received and the stored item and updates to the new revision in case the server provides a newer item. The client marks the received items with lower revisions for the next sync step.
c) Client->server sync: After the server->client sync has completed successfully, the client initiates the client->server sync by transmitting all marked 'ToDo Items' to the server. The client additionally sends 'ToDo Items' that are not tracked by the server yet. The server acknowledges the successful processing and the storage/update of the received items.
d) Close: The client requests the server to close the connection and the server acknowledges the request. Afterwards both instances remove the connection.
NOTE: In case of a conflict, i.e. if the received and stored revision numbers of an item are equal, but if the data-fields have changed, the client has to involve the user for conflict resolution. The GUI should present the conflicting data-fields to the user and allow him to select, which of the two items to keep.
HINT: You should use a (nested) type-length-value encoding for the 'ToDo Items' and their specific data-fields in the network packets as presented during the introduction of HIP.

4) Verify that your system is working correctly by running the server backend locally and by running the client application in the Android emulator included in the SDK.
