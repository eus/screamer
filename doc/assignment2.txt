Assignment 2: scream protokol (AKA Else Kling Protocol)
--------------------------------------------------------

0.) Create a state transition diagram for the scream protocol
  Create the state machines for the client and the server. Make sure 
  you handle all possible input (user input, incoming packets).
  For more information about state diagrams consult your friend google or
  Wikipedia: http://en.wikipedia.org/wiki/State_diagram 

  Read Task 1.) If you are unsure whar the scream protocol does. Task 1 provides
  a detailed description.

1.) Write a server application for scream.
  Screamer will act as client, while the server (listener) will
  document what it receives from screamer.

  The server application should receive UDP packets from the scream
  client. Instead of empty packets, the client should send
  packets containing a sequence number and the server should
  track packet loss, out-of-order delivery, and variation in
  latency by checking the sequence number in the packets.
 
  PLEASE READ THE COMPLETE DESCRIPTION BEFORE YOU START CODING!

  Sub-tasks:
    a) Create the scream server. Call it listener. Listener takes a
       port number as argument. It opens a UDP socket, binds it to the
       port number and waits for incoming screamer packets.

    b) Add a sequence number to each packet that the screamer client
       sends. The server should be able to read this sequence number from 
       the packets.

    c) The server should be able to distinguish packets from up to 16
       different screamer client. It uses the source addresses and 
       source ports to distinguish the screamer clients.

	d) Implement a handshake procedure betweeen the screamer
       client and the server. The client registers to the server
       with a REGISTER  message. This message is sent over UDP.
       The register message contains the clients flooding
       settings (sleep_time, number of packets to be sent). The
       server acknowledges the handshake with an acknowledgement 
       packet. As soon as the acknowledgement is received by the 
       client, it starts sending flood packets.

    e) For each received FLOOD packet, the server determines the
       delay between the current packet and the last packet. It
       also determines whether packets were lost by checking the
       sequence numbers. Finally it figures out how many packets
       were dropped and if there is out-of order delivery.
    
    f) A client can disassoiciate from a server by sending a
       RESET packet. On receiving a reset packet, the server
       sends back a RESULT packet. The result packet contains:
       i) The number of received FLOOD packets. ii) The maximum
       gap size(number of lost packets between two received FLOOD 
       packets), iii) the number of gaps, and iii) whether there was 
       out-of-delivery (FLOOD packets that got mixed up before delivery).

    g) On receiving a RESULT packet, the client prints infos
       about the screamer run: i) packet-loss ratio, ii)
       information about gaps and out-of-order delivery. The 
       client acknowledges the RESULT packet with an ACK packet.

    h) When the server receives the ACK packet it deletes the
       state associated with the client. If it does not receive
       an ACK packet it cleans up the state after at least 10
       seconds have passed since sending the RESULT packet. 
     
    i) BONUS: There will be no reordering and packet loss in the virtual
       network. Hence, you may want to create some disturbance manually for
       testing the server. Implement a test mode for the client in which the
       client randomly discards (not sends) 10% of the packets. Also
       let the client reorder up to 4 sequential packets. This can be
       achieved by buffering some packets and by randomly sending either the
       next regular packet or one of the buffered ones while buffering the 
       regular packet. Make this feature accessible via a command line
       option (-t for test mode). 

   The server should be able to handle 16 clients at the same
   time. This means that the server should demultiplex incoming
   packets, i.e. it  receives a screamer packet on its UDP socket and
   compares its source to the IP addresses of the associated clients (the 
   clients that have used a REGISTER packet to register). The server should
   then figure out the correct context (where to put the data for the 
   statistics of the connection belonging to the senders' address).
   The server also needs demultiplex (i.e. distinguish the packets) by 
   their packet type (UDP FLOOD, RESET, ... packets).

   There is NO NEED to make the server work in parallell (e.g. by
   using fork, threads, etc.). Keep it simple and use a single-threaded
   server that uses one UDP socket and which handles one UDP packet 
   at a time.

   Finally, adjust the Makefile to build both, screamer (client) and listener 
   (server).


Hints:
------------

  A) USE STRUCTS AS PACKET CONTENT
  Implement the REGISTER, ACK, FLOOD, and RESULT packets as
  c-structs that you send over UDP. Mind the network byte-order for multi-byte
  data types. Use a common header format for the packets. The
  first field of the struct should be a TYPE field (uint8_t) that contains
  different numbers for different packet types (REGISTER=1,
  ACK=2, ...). When receiving a packet decide what type it is and
  cast the packet into the specific header struct for that type.
  Example:   
      
      #define SC_PACKET_TYPE_REGISTER 1
      #define SC_PACKET_TYPE_ACK      2
      #define SC_PACKET_TYPE_FLOOD    3
      .....

      typedef struct {
         uint8_t  type;	 /** @brief: packet type**/
      } __attribute__((__packed__)) scream_general_packet;

      typedef struct {
         uint8_t  type;           /** @brief: packet type REGISTER**/
         uint16_t  sleep_time;    /* sleep time in ns */
         uint16_t  total_packets; /* packets to be sent */
      } __attribute__((__packed__)) scream_register_packet;

  

  B) USE SO_RCVTIME TO INTERRUPT RECVFROM
  You need to implement a retransmission scheme for REGISTER and
  RESET packets. If the client does not receive an ACK/RESULT
  packet it should retransmit the REGISTER/RESET packet after 1s
  You can interrupt the receive process by simply setting a timeout for
  the recvfrom system call. This is done by setting the socket
  option SO_RCVTIMEO. Example: 


     struct timeval tv;
     tv.tv_sec = 1;  /* 1 Sec Timeout */
     tv.tv_usec = 0;
     setsockopt(sock, 
                SOL_SOCKET, 
                SO_RCVTIMEO,
                (struct timeval*) &tv,
                sizeof(struct timeval)); 
   ...
 
     n = recvfrom(sockfd,
                  buffer,
                  sizeof(buffer),0,
                  (struct sockaddr*) &cliaddr, &len);

  C) USE A SIMPLE ARRAY FOR STORING THE CONNECTION STATE
  The server must be able to server 16 clients at the same
  time. For this reason you must be able to store the
  connection context for up to 16 clients. There is no need
  for using lists as the number of maximum connections is
  already known. Using a simple array for storing the
  connection state structs suffices. If the server receives a REGISTER 
  packet while it already serves 16 clients, it silently drops it.
  The client will retransmit this packet until one of the 16 clients
  derigisters (reset).

  D) Try to keep it simple :-)

2.) Test your screamer and listener program between the two
virtual machines. Record all packets with tcpdump and view the
recorded dump with wireshark. 
